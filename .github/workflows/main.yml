name: Run Cyber Digital Twin Pipeline

on:
  push:
    branches: [ main ]         # Pour dÃ©clencher Ã  chaque mise Ã  jour de code
  workflow_dispatch:           # Pour lancer manuellement si besoin
  schedule:
    - cron: '0 3 * * *'        # ExÃ©cution automatique tous les jours Ã  4h heure tunisienne (3h UTC)

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install other dependencies
        run: pip install -r requirements.txt
        
      - name: Install PyTorch (CPU)
        run: pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

      - name: ðŸ”§ Install PyG (compatible with torch==2.7.1+cpu)
        run: |
         pip install torch==2.1.0+cpu torchvision==0.16.0+cpu torchaudio==2.1.0+cpu --index-url https://download.pytorch.org/whl/cpu
         pip install torch-scatter -f https://data.pyg.org/whl/torch-2.1.0+cpu.html
         pip install torch-sparse -f https://data.pyg.org/whl/torch-2.1.0+cpu.html
         pip install torch-cluster -f https://data.pyg.org/whl/torch-2.1.0+cpu.html
         pip install torch-spline-conv -f https://data.pyg.org/whl/torch-2.1.0+cpu.html
         pip install torch-geometric

     # #- name: Install other dependencies
       # #run: pip install -r requirements.txt

      - name: Install base dependencies
        run: |
          pip install numpy
          pip install -r requirements.txt
          pip install transformers --upgrade
      - name: Install base dependencies (NumPy compatible)
        run: |
          pip uninstall -y numpy
          pip install "numpy<2"
          pip install -r requirements.txt
          pip install transformers --upgrade

      - name: Debug installed packages
        run: pip list




#name: Run Cyber Digital Twin Pipeline

#on:
#  push:
#    branches: [ main ]
#  workflow_dispatch:
#  schedule:
 #   - cron: '0 3 * * *'  # tous les jours Ã  4h Tunisie (3h UTC)
#
#jobs:
#  build:
#    runs-on: ubuntu-latest

#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up Python 3.11
    #    uses: actions/setup-python@v4
  #      with:
       #   python-version: '3.11'

   #   - name: Upgrade pip
    #    run: python -m pip install --upgrade pip

   #   - name: Install PyTorch and PyTorch Geometric (CPU-safe versions)
   #     run: |
        #  pip install torch==2.0.1 torchvision==0.15.2 torchaudio==2.0.2
         # pip install torch-scatter -f https://data.pyg.org/whl/torch-2.0.1+cpu.html
          #pip install torch-sparse -f https://data.pyg.org/whl/torch-2.0.1+cpu.html
          #pip install torch-cluster -f https://data.pyg.org/whl/torch-2.0.1+cpu.html
       #   pip install torch-spline-conv -f https://data.pyg.org/whl/torch-2.0.1+cpu.html
        #  pip install torch-geometric
      #- name: Check torch version
       # run:  python -c "import torch; print('Torch version:', torch.__version__); print('CUDA available:', torch.cuda.is_available())"


      #- name: Install dependencies
       # run: |
        #   pip install -r requirements.txt
         #  pip install transformers --upgrade
          # pip install "shimmy>=2.0"


  #    - name: Debug installed packages
   #     run: pip list


   #   - name: Upload output artifacts
     #   uses: actions/upload-artifact@v3
    #    with:
      #   name: cskg-output
      #   path: |
        #   graph_cskg.png
         #  graph_cskg_propagation.png
         #  propagated_scores.pkl
        #   metrics.txt


















      - name: Run rotatE_Rgcn
        run: python cskg/rotatE_Rgcn.py

     # - name: Run embeddingsRotateRGCN script
       # run: python cskg/embeddingsRotateRGCN.py

      #- name: Run digital_twin_update
       # run: python cskg/digital_twin_update.py

      ##- name: Run CSKG1_NVD 
       ## run: python cskg/CSKG1_NVD.py

      ##- name: Run CSKG2_Nessus 
        ##run: python cskg/CSKG2_Nessus.py
        
      #- name: Run CSKG1 (NVD) local
       # run: python cskg/cskg1NVD_Neo4jDESktop.py
       
      #- name: Run CSKG1 CVEList3
       # run: python cskg/CVEList3.py
      #- name: Run CSKG1 CVEList
      #  run: python cskg/CVElist.py
      
      #- name: Run CSKG1 (NVD)
       # run: python cskg/cskg1NVD.py
      #- name: Run KG1 (NVD)
        #run: python cskg/collect_nvd.py

      #- name: Run KG2 (Nessus)
       # run: python cskg/inject_nessus.py

      - name: Run Alignment & Fusion
        run: python cskg/aligement_fusion.py

      - name: Run Alignemnt_RLVersion3
        run: python cskg/Alignemnt_RLVersion3.py
        
      - name: Run RotatE_Rgcn_alignement
        run: python cskg/RotatE_Rgcn_alignement.py
        
      - name: Run embedding_predectionRgcn_RotatE
        run: python cskg/embedding_predectionRgcn_RotatE.py
        
      - name: Run Simulation
        run: python cskg/simulation.py

      - name: Run digitalTwin
        run: python cskg/digitalTwin.py

        
     
     # - name: Run Evaluation
      #  run: python cskg/evaluate_alignment.py
       
      #- name: Run Ontologie
      #  run: python cskg/ontologie.py
        
    #  - name: Run cskg3_triples
    #    run: python cskg/cskg3_triples.py
        
    #  - name: Run embeddingsRotateRGCN script
      #  run: python cskg/embeddingsRotateRGCN.py

      #- name: Run Evaluation embeddingsRotateR-GCN 
       # run: python cskg/R-GCNRotatEEvaluation.py
        

      
 #python cskg/analyse.py
 #python cskg/propagate_impacts.py
 #python cskg/fuse_unified_cves.py
 
      #- name: Run Analyse
        #run: python cskg/analyse.py
        
      #- name: Run Cskg3OntologyPipeline
        #run: python cskg/Cskg3OntologyPipeline.py
         
      #- name: Run Analyse
       # run: python cskg/Cskg3OntologyPipeline.py
       
     

      #- name: Train Embeddings
        #run: python cskg/embeddings_train.py
      #  run: python cskg/embeddingsRotateRGCN.py
        
      #- name: Run R-GCN Prediction
        #run: python cskg/r_gcn_predict.py

      #- name: Generate Visualizations
      #  run: python cskg/visualization.py
      #- name: Run RotatE Prediction
       # run: python cskg/rotate_predict.py
     # - name: Run load
     #   run: python cskg/utils/load_triples.py
     # - name: Visualisation
      #  run: python cskg/visualization.py
